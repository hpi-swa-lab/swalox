load("test.lox");
beginTest("04 Control");

var result;

result = nil;
if (true) result = 1;
expect("if true without block", String(result), "1");

result = nil;
if (true) { result = 1; }
expect("if true with block ", String(result), "1");

result = nil;
if (false) result = 1;
expect("if false", String(result), "nil");

result = nil;
if (true) result = 1; else result = 2;
expect("if true else ...", String(result), "1");

result = nil;
if (false) result = 1; else result = 2;
expect("if false else ...", String(result), "2");

var i = 0;
result = "";
while (i < 3) {
    i = i + 1;
    result = result + String(i) + " ";
}
expect("print 1 2 3", String(result), "1 2 3 ");

{
    result = "";
    for (var i = 1; i <= 3; i = i + 1) {
        result = result + String(i) + " ";
    }
    expect("for loop", String(result), "1 2 3 ");
}

{
    var i = 8;
    for (var i = 1; i <= 3; i = i + 1) {}
    result = i;
    expect("for loop scope i", String(result), "8");
}

{
    var i;
    result = "";
    for (i = 1; i <= 3; i = i + 1) {
        result = result + String(i) + " ";
    }
    expect("for loop with outer var declaration", String(result), "1 2 3 ");
}


fun a() { result = result + "a "; return true; }
fun b() { result = result + "b "; return false; }

result = "";
a() and b();
expect("a and b", String(result), "a b ");

result = "";
b() and a();
expect("b and a", String(result), "b ");

result = "";
a() or b();
expect("a or b", String(result), "a ");

result = "";
b() or a();
expect("b or a", String(result), "b a ");