// based on https://github.com/smarr/are-we-fast-yet/blob/master/benchmarks/JavaScript/list.js

// This code is derived from the SOM benchmarks, see AUTHORS.md file.
//
// Copyright (c) 2015-2016 Stefan Marr <git@stefan-marr.de>
// Copyright (c) 2024 Jens Lincke  Sotware Architecture Group, Hasso-Plattner-Institute
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

load("benchmark.lox");

class Element {
    init(v) {
        this.val = v;
        this.next = nil;
    }

    length() {
        if (this.next == nil) {
        return 1;
        }
        return 1 + this.next.length();
    }
}

class List < Benchmark {
    benchmark() {
        var result = this.takl(
            this.makeList(15),
            this.makeList(10),
            this.makeList(6)
        );
        return result.length();
    }

    makeList(length) {
        if (length == 0) {
        return nil;
        }
        var e = Element(length);
        e.next = this.makeList(length - 1);
        return e;
    }

    isShorterThan(x, y) {
        var xTail = x;
        var yTail = y;

        while (yTail != nil) {
            if (xTail == nil) { 
                return true; 
            }
            xTail = xTail.next;
            yTail = yTail.next;
        }
        return false;
    }


    // TAKL -- The TAKeuchi function using lists as counters
    takl(x, y, z) {
        // print "takl " + String(x.length()) + " " + String(y.length()) + " " + String(z.length());
        if (this.isShorterThan(y, x)) {
            return this.takl(
                this.takl(x.next, y, z),
                this.takl(y.next, z, x),
                this.takl(z.next, x, y)
            );
        }
        return z;
    }

    verifyResult(result) {
        return 10 == result;
    }
}

return List();
  

