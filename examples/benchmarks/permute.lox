// This code is derived from the SOM benchmarks, see AUTHORS.md file.
//
// Copyright (c) 2015-2016 Stefan Marr <git@stefan-marr.de>
// Copyright (c) 2024 Jens Lincke  Sotware Architecture Group, Hasso-Plattner-Institute
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

load("benchmark.lox");

class Permute < Benchmark {
    init() {
        super.init();
        this.count = 0;
        this.v = nil;
        this.n = 6;
    }

    benchmark() {
        this.count = 0;
        this.v = [];
        for (var i = 0; i < this.n; i = i + 1) {
            this.v[i] = i + 1;  
        }
        this.permute(0, this.n);
        return this.count;
    }

    verifyResult(result) {
        return result == 720;
    }

    // TODO not yet standart of "Are we fast yet", so this not comparable
    permute(i, n) {
        var j;
        if (i == n) {
            this.count = this.count + 1;
            // print "" + this.count + " " + this.v;
        } else {
            for (j = i; j < n; j = j + 1) {
                this.swap(i, j);          
                this.permute(i+1, n);
                this.swap(i, j);
            }
        }
    } 

    swap(i, j) {
        var tmp = this.v[i];
        this.v[i] = this.v[j];
        this.v[j] = tmp;
    }
}

return Permute();
